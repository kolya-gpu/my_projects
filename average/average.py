"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import statistics
import math
from typing import List, Tuple, Optional
from collections import Counter
import sys


class DataAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, data: List[float]):
        self.data = sorted(data)
        self.n = len(data)
        
    def basic_stats(self) -> dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if self.n == 0:
            return {}
            
        return {
            'count': self.n,
            'sum': sum(self.data),
            'mean': statistics.mean(self.data),
            'median': statistics.median(self.data),
            'mode': statistics.mode(self.data) if self.n > 0 else None,
            'min': min(self.data),
            'max': max(self.data),
            'range': max(self.data) - min(self.data)
        }
    
    def variance_stats(self) -> dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏—Å–ø–µ—Ä—Å–∏–∏"""
        if self.n < 2:
            return {}
            
        return {
            'variance': statistics.variance(self.data),
            'population_variance': statistics.pvariance(self.data),
            'std_dev': statistics.stdev(self.data),
            'population_std_dev': statistics.pstdev(self.data),
            'coefficient_of_variation': statistics.stdev(self.data) / statistics.mean(self.data) if statistics.mean(self.data) != 0 else None
        }
    
    def percentile_stats(self) -> dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏ –∏ –∫–≤–∞—Ä—Ç–∏–ª–∏"""
        if self.n == 0:
            return {}
            
        return {
            'q1': statistics.quantiles(self.data, n=4)[0],
            'q2': statistics.quantiles(self.data, n=4)[1],
            'q3': statistics.quantiles(self.data, n=4)[2],
            'iqr': statistics.quantiles(self.data, n=4)[2] - statistics.quantiles(self.data, n=4)[0],
            'p10': statistics.quantiles(self.data, n=10)[0],
            'p90': statistics.quantiles(self.data, n=10)[8]
        }
    
    def skewness_kurtosis(self) -> dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∞—Å–∏–º–º–µ—Ç—Ä–∏—é –∏ —ç–∫—Å—Ü–µ—Å—Å"""
        if self.n < 3:
            return {}
            
        mean = statistics.mean(self.data)
        std = statistics.stdev(self.data)
        
        # –ê—Å–∏–º–º–µ—Ç—Ä–∏—è
        skewness = sum(((x - mean) / std) ** 3 for x in self.data) / self.n
        
        # –≠–∫—Å—Ü–µ—Å—Å
        kurtosis = sum(((x - mean) / std) ** 4 for x in self.data) / self.n - 3
        
        return {
            'skewness': skewness,
            'kurtosis': kurtosis
        }
    
    def outliers(self, method: str = 'iqr') -> List[float]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—ã–±—Ä–æ—Å—ã –≤ –¥–∞–Ω–Ω—ã—Ö"""
        if self.n < 4:
            return []
            
        if method == 'iqr':
            q1, q3 = statistics.quantiles(self.data, n=4)[0], statistics.quantiles(self.data, n=4)[2]
            iqr = q3 - q1
            lower_bound = q1 - 1.5 * iqr
            upper_bound = q3 + 1.5 * iqr
            return [x for x in self.data if x < lower_bound or x > upper_bound]
        
        elif method == 'zscore':
            mean = statistics.mean(self.data)
            std = statistics.stdev(self.data)
            return [x for x in self.data if abs((x - mean) / std) > 2]
        
        return []
    
    def frequency_distribution(self, bins: int = 10) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç —á–∞—Å—Ç–æ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
        if self.n == 0:
            return {}
            
        min_val, max_val = min(self.data), max(self.data)
        bin_width = (max_val - min_val) / bins
        
        distribution = {}
        for i in range(bins):
            lower = min_val + i * bin_width
            upper = min_val + (i + 1) * bin_width
            count = sum(1 for x in self.data if lower <= x < upper)
            if count > 0:
                distribution[f"{lower:.2f}-{upper:.2f}"] = count
        
        return distribution


def validate_input(data_str: str) -> Tuple[bool, str, Optional[List[float]]]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    if not data_str.strip():
        return False, "–í–≤–µ–¥–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞", None
    
    try:
        numbers = [float(x.strip()) for x in data_str.split()]
        if not numbers:
            return False, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞", None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –∏ NaN
        for num in numbers:
            if math.isinf(num) or math.isnan(num):
                return False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {num}", None
        
        return True, "–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", numbers
        
    except ValueError as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}", None


def print_statistics(analyzer: DataAnalyzer) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    print("\n" + "="*60)
    print("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó")
    print("="*60)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    basic = analyzer.basic_stats()
    if basic:
        print("\nüî¢ –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {basic['count']}")
        print(f"   –°—É–º–º–∞: {basic['sum']:.4f}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ: {basic['mean']:.4f}")
        print(f"   –ú–µ–¥–∏–∞–Ω–∞: {basic['median']:.4f}")
        print(f"   –ú–æ–¥–∞: {basic['mode']:.4f}" if basic['mode'] is not None else "   –ú–æ–¥–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        print(f"   –ú–∏–Ω–∏–º—É–º: {basic['min']:.4f}")
        print(f"   –ú–∞–∫—Å–∏–º—É–º: {basic['max']:.4f}")
        print(f"   –†–∞–∑–º–∞—Ö: {basic['range']:.4f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
    variance = analyzer.variance_stats()
    if variance:
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ò–°–ü–ï–†–°–ò–ò:")
        print(f"   –î–∏—Å–ø–µ—Ä—Å–∏—è –≤—ã–±–æ—Ä–∫–∏: {variance['variance']:.4f}")
        print(f"   –î–∏—Å–ø–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏: {variance['population_variance']:.4f}")
        print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏: {variance['std_dev']:.4f}")
        print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏: {variance['population_std_dev']:.4f}")
        if variance['coefficient_of_variation']:
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {variance['coefficient_of_variation']:.4f}")
    
    # –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏
    percentiles = analyzer.percentile_stats()
    if percentiles:
        print("\nüìä –ü–ï–†–¶–ï–ù–¢–ò–õ–ò –ò –ö–í–ê–†–¢–ò–õ–ò:")
        print(f"   Q1 (25%): {percentiles['q1']:.4f}")
        print(f"   Q2 (50%): {percentiles['q2']:.4f}")
        print(f"   Q3 (75%): {percentiles['q3']:.4f}")
        print(f"   –ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö: {percentiles['iqr']:.4f}")
        print(f"   P10 (10%): {percentiles['p10']:.4f}")
        print(f"   P90 (90%): {percentiles['p90']:.4f}")
    
    # –ê—Å–∏–º–º–µ—Ç—Ä–∏—è –∏ —ç–∫—Å—Ü–µ—Å—Å
    skew_kurt = analyzer.skewness_kurtosis()
    if skew_kurt:
        print("\nüìê –§–û–†–ú–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:")
        print(f"   –ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {skew_kurt['skewness']:.4f}")
        print(f"   –≠–∫—Å—Ü–µ—Å—Å: {skew_kurt['kurtosis']:.4f}")
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏
        if abs(skew_kurt['skewness']) < 0.5:
            skew_interpretation = "—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ"
        elif skew_kurt['skewness'] > 0:
            skew_interpretation = "–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∞—Å–∏–º–º–µ—Ç—Ä–∏—è)"
        else:
            skew_interpretation = "–ª–µ–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∞—Å–∏–º–º–µ—Ç—Ä–∏—è)"
        print(f"   –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏: {skew_interpretation}")
    
    # –í—ã–±—Ä–æ—Å—ã
    outliers_iqr = analyzer.outliers('iqr')
    outliers_zscore = analyzer.outliers('zscore')
    if outliers_iqr or outliers_zscore:
        print("\n‚ö†Ô∏è  –í–´–ë–†–û–°–´:")
        if outliers_iqr:
            print(f"   –ü–æ –º–µ—Ç–æ–¥—É IQR: {outliers_iqr}")
        if outliers_zscore:
            print(f"   –ü–æ –º–µ—Ç–æ–¥—É Z-score: {outliers_zscore}")
    
    # –ß–∞—Å—Ç–æ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    distribution = analyzer.frequency_distribution()
    if distribution:
        print("\nüìä –ß–ê–°–¢–û–¢–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
        for interval, count in distribution.items():
            percentage = (count / analyzer.n) * 100
            bar = "‚ñà" * int(percentage / 5)  # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            print(f"   {interval}: {count} ({percentage:.1f}%) {bar}")


def interactive_mode() -> None:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
    print("üéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("="*60)
    
    while True:
        try:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
            print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
            print("4. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
            
            if choice == '1':
                data_input = input("\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ")
                is_valid, message, numbers = validate_input(data_input)
                
                if is_valid:
                    analyzer = DataAnalyzer(numbers)
                    print_statistics(analyzer)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {message}")
            
            elif choice == '2':
                filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ").strip()
                try:
                    with open(filename, 'r', encoding='utf-8') as f:
                        content = f.read()
                    is_valid, message, numbers = validate_input(content)
                    
                    if is_valid:
                        analyzer = DataAnalyzer(numbers)
                        print_statistics(analyzer)
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ: {message}")
                except FileNotFoundError:
                    print(f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
            elif choice == '3':
                print_help()
            
            elif choice == '4':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def print_help() -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    print("\nüìö –°–ü–†–ê–í–ö–ê –ü–û –ü–†–û–ì–†–ê–ú–ú–ï")
    print("="*60)
    print("–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    print("\nüìä –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
    print("‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å—Ä–µ–¥–Ω–µ–µ, –º–µ–¥–∏–∞–Ω–∞, –º–æ–¥–∞, –º–∏–Ω–∏–º—É–º, –º–∞–∫—Å–∏–º—É–º)")
    print("‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (–¥–∏—Å–ø–µ—Ä—Å–∏—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)")
    print("‚Ä¢ –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏ –∏ –∫–≤–∞—Ä—Ç–∏–ª–∏")
    print("‚Ä¢ –ê—Å–∏–º–º–µ—Ç—Ä–∏—è –∏ —ç–∫—Å—Ü–µ—Å—Å")
    print("‚Ä¢ –í—ã–±—Ä–æ—Å—ã (–º–µ—Ç–æ–¥—ã IQR –∏ Z-score)")
    print("‚Ä¢ –ß–∞—Å—Ç–æ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
    print("\nüí° –°–û–í–ï–¢–´:")
    print("‚Ä¢ –í–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 2 3 4 5)")
    print("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞")
    print("‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ")
    print("‚Ä¢ –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç 4")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    
    try:
        interactive_mode()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()